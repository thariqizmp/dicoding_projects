# -*- coding: utf-8 -*-
"""Proyek Kedua_Membuat Model Machine Learning dengan Data Time Series_Thariq Iskandar ZMP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YVAGksr5aRhSZKcAJIhQ9MFtSqPwss-d

# **Proyek Kedua : Membuat Model Machine Learning dengan Data Time Series**
### Nama : Thariq Iskandar Zulkarnain M P
### No. Pendaftaran : 0182180151-57
### Email : thariqiskandar9@gmail.com
### No. Handphone : 6281332409623
### Tema Pelatihan : FGA Machine Learning (IBM)
"""

import numpy as np
import pandas as pd
#from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split

#membuat kelas callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< x and logs.get('val_mae')< x):
      self.model.stop_training = True
      print("\nmodel memiliki mae dan val_mae < 10% dari skala data")
callbacks = myCallback()

#input dataset harga saham AABA dari tahun 2006 sampai 2018
df = pd.read_csv('AABA_2006-01-01_to_2018-01-01.csv')
df

#meilhat apakah ada data yang hilang dari dataset
df.isnull().sum()

date = df['Date'].values
close  = df['Close'].values #pada kasus ini digunakan harga penutupan / close price
 
#membuat plot dari data 
plt.figure(figsize=(15,5))
plt.plot(date, close)
plt.title('Close Price',
          fontsize=20);

#membuat fungsi window
def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

#split dataset dengan ratio 80:20
close_train, close_test, date_train, date_test = train_test_split(close, date, test_size = 0.2, random_state = 0 , shuffle=False)

#memanggil fungsi window untuk membagi data menjadi atribut dan label
data_close_train = windowed_dataset(close_train, window_size=60, batch_size=100, shuffle_buffer=5000)
data_close_test = windowed_dataset(close_test, window_size=60, batch_size=100, shuffle_buffer=5000)

#membangun arsitektur neural network
model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

#menentukan batas nilai 10% dari skala data untuk parameter callback
x = (close.max() - close.min()) * (10 / 100)
print(x)

#menggunakan parameter learning rate dan momentum pada optimizer
optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)

#melakukan compile pada model
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

#latih model dengan jumlah epoch 100
history = model.fit(data_close_train,
                    epochs=100, 
                    validation_data=data_close_test, 
                    callbacks=[callbacks])

#plot dari mae
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

#plot dari loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()